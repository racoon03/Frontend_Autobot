//import React from 'react';
//import Slider from 'react-slick';
import { Button, Card, message } from "antd";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import { paymentService } from "../services/paymentService";
import { authService } from "../services/authService";
import { useEffect, useState, useCallback } from "react";
import { Link } from "react-router-dom";
import { priceBotService, type PriceBot } from "../services/priceBotService";

const carouselImages = [
  "./src/assets/info6.png",
  "./src/assets/info1.png",
  "./src/assets/info2.png",
  "./src/assets/info3.png",
];

const carouselHeightClass = "h-[300px] sm:h-[400px] md:h-[500px] w-[1000px]";

interface SimpleImageCarouselProps {
  images: string[];
  heightClass?: string;
  autoPlayInterval?: number;
}

const SimpleImageCarousel: React.FC<SimpleImageCarouselProps> = ({
  images,
  heightClass = "h-64",
  autoPlayInterval,
}) => {
  const [currentIndex, setCurrentIndex] = useState(0);

  const goToNext = useCallback(() => {
    setCurrentIndex((prevIndex) => {
      const isLastSlide = prevIndex === images.length - 1;
      return isLastSlide ? 0 : prevIndex + 1;
    });
  }, [images.length]);

  useEffect(() => {
    if (autoPlayInterval && autoPlayInterval > 0 && images.length > 1) {
      const timer = setInterval(() => {
        goToNext();
      }, autoPlayInterval);

      return () => clearInterval(timer);
    }
  }, [currentIndex, autoPlayInterval, images.length, goToNext]);

  if (!images || images.length === 0) {
    return (
      <div
        className={`w-full ${heightClass} bg-gray-700 flex items-center justify-center text-gray-400 rounded-lg`}
      >
        No images to display.
      </div>
    );
  }

  return (
    <div
      className={`relative w-full ${heightClass} rounded-lg overflow-hidden shadow-xl`}
    >
      <div
        style={{ backgroundImage: `url(${images[currentIndex]})` }}
        className="w-full h-full bg-center bg-cover duration-500 ease-in-out"
      ></div>
    </div>
  );
};

//--------------------------------------------------------------------------------------------------

const HomePage = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [priceBots, setPriceBots] = useState<PriceBot[]>([]);
  const [loading, setLoading] = useState(true);
  const autoPlayTime = 3000;

  useEffect(() => {
    const user = authService.getCurrentUser();
    setIsLoggedIn(!!user);

    const fetchPriceBots = async () => {
      try {
        const data = await priceBotService.getAllPriceBots();
        console.log(data);
        setPriceBots(data);
      } catch (error) {
        console.error("Error fetching price bots:", error);
        message.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu g√≥i d·ªãch v·ª•");
      } finally {
        setLoading(false);
      }
    };

    fetchPriceBots();
  }, []);

  const handleBuyNow = async (month: number, botTradingId: number) => {
    try {
      // 1. Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
      const user = authService.getCurrentUser();
      if (!user) {
        message.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c thanh to√°n.");
        return;
      }

      // 2. Chu·∫©n b·ªã d·ªØ li·ªáu y√™u c·∫ßu ƒë·ªÉ t·∫°o link thanh to√°n
      const request = {
        userId: user.userId,
        month: month,
        botTradingId: botTradingId,
        returnUrl: `${window.location.origin}/success`, // URL khi thanh to√°n th√†nh c√¥ng
        cancelUrl: `${window.location.origin}/cancel`, // URL khi h·ªßy thanh to√°n
      };
      // 3. G·ªçi API ƒë·ªÉ t·∫°o link thanh to√°ns
      const response = await paymentService.createPaymentLink(request);
      console.log(response);
      // 4. Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øns trang thanh to√°n
      if (response) {
        // M·ªü link thanh to√°n trong m·ªôt tab m·ªõi
        window.open(response.data, "_blank");
      } else {
        message.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c li√™n k·∫øt thanh to√°n t·ª´ m√°y ch·ªß.");
      }
    } catch (error: any) {
      // 5. X·ª≠ l√Ω l·ªói n·∫øu c√≥
      const errorMessage =
        error.response?.data?.message ||
        error.message ||
        "ƒê√£ x·∫£y ra l·ªói khi t·∫°o li√™n k·∫øt thanh to√°n.";
      message.error(errorMessage);
      console.error("L·ªói khi thanh to√°n:", error);
    }
  };

  //------------------------------------------------------------------------------------------------------------------------------
  const processStepsData = [
    {
      id: 1,
      icon: "üöÄ",
      title: "Giao D·ªãch T·ª± ƒê·ªông V√† Linh Ho·∫°t",
      content:
        "Bot c√≥ kh·∫£ nƒÉng th·ª±c hi·ªán giao d·ªãch t·ª± ƒë·ªông d·ª±a tr√™n c√°c chi·∫øn l∆∞·ª£c ƒë√£ ƒë∆∞·ª£c l·∫≠p tr√¨nh s·∫µn ho·∫∑c t√πy ch·ªânh theo nhu c·∫ßu c·ªßa b·∫°n.Bot kh√¥ng ch·ªâ gi√∫p b·∫°n giao d·ªãch t·ª± ƒë·ªông m√† c√≤n ƒëi·ªÅu ch·ªânh l·ªánh linh ho·∫°t theo bi·∫øn ƒë·ªông th·ªã tr∆∞·ªùng. V·ªõi kh·∫£ nƒÉng c·∫≠p nh·∫≠t li√™n t·ª•c, bot ƒë·∫£m b·∫£o hi·ªáu su·∫•t t·ªëi ∆∞u v√† gi√∫p b·∫°n t·∫≠n d·ª•ng m·ªçi c∆° h·ªôi ƒë·∫ßu t∆∞.",
    },
    {
      id: 2,
      icon: "üöÄ",
      title: "T·ª± ƒë·ªông th√¥ng b√°o",
      content:
        "H·ªá th·ªëng t·ª± ƒë·ªông g·ª≠i c·∫£nh b√°o t√≠n hi·ªáu ƒë·∫øn ng∆∞·ªùi d√πng gi√∫p kh√¥ng b·ªè l·ª° c∆° h·ªôi. V·ªõi c√¥ng ngh·ªá c·∫£nh b√°o theo th·ªùi gian th·ª±c, bot s·∫Ω th√¥ng b√°o ngay khi c√≥ t√≠n hi·ªáu quan tr·ªçng. B·∫°n c√≥ th·ªÉ nh·∫≠n th√¥ng b√°o qua n·ªÅn t·∫£ng kh√°c nhau, ƒë·∫£m b·∫£o lu√¥n c·∫≠p nh·∫≠t di·ªÖn bi·∫øn th·ªã tr∆∞·ªùng nhanh ch√≥ng.",
    },
    {
      id: 3,
      icon: "üöÄ",
      title: "H·ªó Tr·ª£ 24/7",
      content:
        "Bot ho·∫°t ƒë·ªông li√™n t·ª•c 24/7, gi√∫p b·∫°n lu√¥n n·∫Øm b·∫Øt ƒë∆∞·ª£c m·ªçi bi·∫øn ƒë·ªông c·ªßa th·ªã tr∆∞·ªùng. B·∫•t k·ªÉ ng√†y hay ƒë√™m, bot lu√¥n s·∫µn s√†ng theo d√µi th·ªã tr∆∞·ªùng, gi√∫p b·∫°n kh√¥ng b·ªè l·ª° b·∫•t k·ª≥ c∆° h·ªôi ƒë·∫ßu t∆∞ n√†o. H·ªá th·ªëng li√™n t·ª•c c·∫≠p nh·∫≠t d·ªØ li·ªáu, ƒë∆∞a ra quy·∫øt ƒë·ªãnh nhanh ch√≥ng v√† t·ªëi ∆∞u h√≥a chi·∫øn l∆∞·ª£c giao d·ªãch.",
    },
  ];

  interface ProcessStepCardProps {
    icon: React.ReactNode;
    title: string;
    content: string;
  }

  const ProcessStepCard: React.FC<ProcessStepCardProps> = ({
    icon,
    title,
    content,
  }) => {
    return (
      <div className="bg-white p-6 md:p-8 rounded-xl shadow-lg w-full transform transition-all duration-300 hover:shadow-2xl hover:-translate-y-1">
        <div className="flex items-start space-x-4 md:space-x-5">
          <div className="flex-shrink-0 text-pink-500 text-3xl w-10 h-10 flex items-center justify-center mt-1">
            <span className="text-4xl">{icon}</span>
          </div>
          <div className="flex-1">
            <h3 className="text-xl md:text-2xl font-semibold text-gray-800 mb-2">
              {title}
            </h3>
            <p className="text-gray-600 text-sm md:text-base leading-relaxed">
              {content}
            </p>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="font-sans">
      {/*deoo biet sua sao cho vua */}
      <div className="bg-gray-200 text-gray-700 h-[75vh] flex items-center py-16 px-4 sm:px-6 lg:px-8">
        <div className="container mx-auto flex flex-col lg:flex-row items-center gap-8 lg:gap-16">
          {/*ben trai */}
          <div className="lg:w-1/2 text-center lg:text-left">
            <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold leading-tight mb-6">
              HI·ªÜU SU·∫§T ƒê·∫¶U T∆Ø CAO
            </h1>
            <p className="text-lg sm:text-xl text-gray-900 mb-8 max-w-xl mx-auto lg:mx-0">
              T·ª± ƒë·ªông giao d·ªãch ph√°i sinh
            </p>
            {!isLoggedIn && (
              <div className="flex justify-start gap-4">
                <Link to="/login">
                  <Button className="bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-3 px-8 rounded-lg text-lg transition duration-300 ease-in-out transform hover:scale-105">
                    ƒêƒÉng nh·∫≠p
                  </Button>
                </Link>

                <Link to="/register">
                  <Button className="bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-3 px-8 rounded-lg text-lg transition duration-300 ease-in-out transform hover:scale-105">
                    ƒêƒÉng k√Ω
                  </Button>
                </Link>
              </div>
            )}
          </div>

          {/* ben phai */}
          <div className="lg:w-1/2 mt-10 lg:mt-0">
            <div className="p-4 h-[300px] sm:h-[400px] md:h-[500px] flex items-center justify-center">
              <SimpleImageCarousel
                images={carouselImages}
                heightClass={carouselHeightClass}
                autoPlayInterval={autoPlayTime}
              />
            </div>
          </div>
        </div>
      </div>

      {/* tinh nang chinh*/}

      <section className="py-16 lg:py-24 bg-slate-50">
        <div className="mb-20">
          <h2 className="text-center md:text-4xl font-bold text-gray-700 mb-10">
            T√≠nh NƒÉng H·ªá Th·ªëng
          </h2>
        </div>

        <div className="container mx-auto px-4">
          <div className="flex flex-col lg:flex-row gap-12 lg:gap-20 items-center">
            {/* cot trai */}
            <div className="lg:w-5/12 xl:w-1/2 w-full px-4 py-8">
              <h2 className="text-left text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-4 md:mb-6">
                T·ªëi ∆∞u h√≥a giao d·ªãch v·ªõi c√¥ng ngh·ªá ti√™n ti·∫øn
              </h2>
              <p className="text-left text-gray-700 text-base md:text-lg leading-relaxed text-justify">
                H·ªá th·ªëng bot trading c·ªßa ch√∫ng t√¥i gi√∫p b·∫°n giao d·ªãch m·ªôt c√°ch
                t·ª± ƒë·ªông, hi·ªáu qu·∫£ v√† ch√≠nh x√°c. ƒê∆∞·ª£c thi·∫øt k·∫ø v·ªõi c√°c thu·∫≠t to√°n
                hi·ªán ƒë·∫°i, bot c√≥ kh·∫£ nƒÉng nh·∫≠n di·ªán t√≠n hi·ªáu th·ªã tr∆∞·ªùng, ƒë·∫∑t
                l·ªánh nhanh ch√≥ng v√† theo d√µi tr·∫°ng th√°i giao d·ªãch theo th·ªùi gian
                th·ª±c.
              </p>
              <p className="mt-4 text-left text-gray-700 text-base md:text-lg leading-relaxed text-justify">
                C√°c t√≠nh nƒÉng n·ªïi b·∫≠t: Giao d·ªãch t·ª± ƒë·ªông: Bot s·∫Ω ph√¢n t√≠ch xu
                h∆∞·ªõng th·ªã tr∆∞·ªùng v√† th·ª±c hi·ªán giao d·ªãch theo c√°c t√≠n hi·ªáu th√¥ng
                minh. Qu·∫£n l√Ω v·ªã th·∫ø: T√≠ch h·ª£p ch·ª©c nƒÉng h·ªßy l·ªánh, ƒë·∫£o chi·ªÅu v·ªã
                th·∫ø v√† ch·ªët l·ªùi theo t·ª´ng chi·∫øn l∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc. Theo d√µi th·ªã
                tr∆∞·ªùng: Hi·ªÉn th·ªã t√≠n hi·ªáu gi√°, tr·∫°ng th√°i l·ªánh v√† c·∫≠p nh·∫≠t danh
                s√°ch giao d·ªãch li√™n t·ª•c. B·∫£o m·∫≠t v√† ƒëƒÉng nh·∫≠p an to√†n: H·ªá th·ªëng
                x√°c th·ª±c gi√∫p b·∫°n ƒëƒÉng nh·∫≠p v√† qu·∫£n l√Ω t√†i kho·∫£n m·ªôt c√°ch an
                to√†n.
              </p>
            </div>

            {/* cot phai */}
            <div className="lg:w-7/12 xl:w-1/2 w-full flex flex-col space-y-8 md:space-y-10">
              {processStepsData.map((step) => (
                <ProcessStepCard
                  key={step.id}
                  icon={step.icon}
                  title={step.title}
                  content={step.content}
                />
              ))}
            </div>
          </div>
        </div>
      </section>

      {/*bang gia dich vu */}
      <section className="bg-gray-300 py-16 text-center">
        <div className="container mx-auto px-4">
          <h2 className="md:text-4xl font-bold text-gray-700 mb-10">
            B·∫£ng gi√° d·ªãch v·ª•
          </h2>

          {loading ? (
            <p className="text-center text-white">
              ƒêang t·∫£i d·ªØ li·ªáu g√≥i d·ªãch v·ª•...
            </p>
          ) : priceBots.length === 0 ? (
            <p className="text-center text-white">
              Kh√¥ng c√≥ d·ªØ li·ªáu g√≥i d·ªãch v·ª•.
            </p>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-8 justify-items-center">
              {priceBots.map((pkg, idx) => (
                <Card
                  key={idx}
                  className="rounded-2xl shadow-lg w-full max-w-xs transform transition-all duration-300 hover:shadow-2xl hover:-translate-y-1"
                >
                  <div className="text-center p-4">
                    {pkg.discount > 0 && (
                      <div className="relative w-14 h-14 ml-auto">
                        <div className="absolute inset-0 bg-red-600 rounded-full border-4 border-white border-dashed flex items-center justify-center">
                          <div className="text-right text-white">
                            <p className="text-xs font-bold">Gi·∫£m</p>
                            <p className="text-sm font-bold">{`${pkg.discount}%`}</p>
                          </div>
                        </div>
                      </div>
                    )}

                    <img
                      src="src/assets/iconbot.png"
                      alt="bot"
                      className="w-32 h-32 mx-auto mb-4"
                    />

                    <h3 className="text-xl font-semibold mb-2">{`${pkg.month} Th√°ng`}</h3>

                    <p className="text-lg font-bold text-green-700 mb-4">
                      {pkg.price.toLocaleString("vi-VN")} VND
                    </p>

                    {pkg.description && (
                      <p className="text-sm text-gray-600 mb-4">
                        {pkg.description}
                      </p>
                    )}

                    {isLoggedIn && (
                      <Button
                        type="primary"
                        className="bg-[#22D3EE]"
                        onClick={() =>
                          handleBuyNow(pkg.month, pkg.botTradingId)
                        }
                      >
                        Mua ngay
                      </Button>
                    )}
                  </div>
                </Card>
              ))}
            </div>
          )}
        </div>
      </section>
    </div>
  );
};
export default HomePage;
